// Code generated by MockGen. DO NOT EDIT.
// Source: utils/crypt.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/utils/crypt.go -source=utils/crypt.go -package=mocks CryptInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCryptInterface is a mock of CryptInterface interface.
type MockCryptInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCryptInterfaceMockRecorder
	isgomock struct{}
}

// MockCryptInterfaceMockRecorder is the mock recorder for MockCryptInterface.
type MockCryptInterfaceMockRecorder struct {
	mock *MockCryptInterface
}

// NewMockCryptInterface creates a new mock instance.
func NewMockCryptInterface(ctrl *gomock.Controller) *MockCryptInterface {
	mock := &MockCryptInterface{ctrl: ctrl}
	mock.recorder = &MockCryptInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptInterface) EXPECT() *MockCryptInterfaceMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockCryptInterface) CompareHashAndPassword(hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockCryptInterfaceMockRecorder) CompareHashAndPassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockCryptInterface)(nil).CompareHashAndPassword), hashedPassword, password)
}

// GenerateFromPassword mocks base method.
func (m *MockCryptInterface) GenerateFromPassword(password []byte, cost int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", password, cost)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockCryptInterfaceMockRecorder) GenerateFromPassword(password, cost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockCryptInterface)(nil).GenerateFromPassword), password, cost)
}
